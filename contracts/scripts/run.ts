import { ethers } from "hardhat";
import { BigNumberish } from "ethers";

const main = async () => {

    const RayCastingVerifier = await ethers.getContractFactory("RayCastingVerifier");
    const rayCastingVerifier = await RayCastingVerifier.deploy();
    await rayCastingVerifier.waitForDeployment();
    // console.log("RayCastingVerifier Contract deployed to:", rayCastingVerifier.getAddress());
    const deployedAddress = await rayCastingVerifier.getAddress(); // Espera a que se resuelva la promesa
    console.log("RayCastingVerifier Contract deployed to:", deployedAddress);

    let calldataRaycasting : (string[] | string[][])[] = [
        ["0x252752d2ed099bfdb26719b4134fffbeda1a5018765c5945e1bd394d6add9c0b", "0x174ce20d4c008adc3bd57af7266b07098bb4e4ec3d443d96c43120d218dcf5dc"],[["0x29ba226d1abe391ffe414f8ff09079602a14e215f642a02d890f47b169e909de", "0x21a7002e763b07865b8057868ca845c1539bac5d2d3da1f054428f77275c9909"],["0x0e13f8e51b7357e5b6dbfb6f14d05db64874e8a371d5c9713a5f11d10de4d313", "0x19fde9ac48303ec3062cab0af97024d9a4a3775269d19e3c0683bc259c65f25b"]],["0x05cb46deb1b3039aa844e9aa70abecadea47c87e769a93b1b565b5c5fbacde36", "0x1d748ba6ed416ff47ce3c5b8da19a3cc73e98bb590fac607a52f0749a93fbbae"],["0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000006","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000005","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000005","0x0000000000000000000000000000000000000000000000000000000000000005","0x0000000000000000000000000000000000000000000000000000000000000003","0x0000000000000000000000000000000000000000000000000000000000000005","0x0000000000000000000000000000000000000000000000000000000000000003","0x0000000000000000000000000000000000000000000000000000000000000003","0x0000000000000000000000000000000000000000000000000000000000000001","0x0000000000000000000000000000000000000000000000000000000000000003","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000","0x0000000000000000000000000000000000000000000000000000000000000000"]
    ];

    // Call the function.
    // let result = await rayCastingVerifier.verifyProof(
    //     calldataRaycasting[0],
    //     calldataRaycasting[1],
    //     calldataRaycasting[2],
    //     calldataRaycasting[3]
    // );

    // console.log("Result", result);


    // Asegurarse de que cada parte de calldataRaycasting esté en el formato correcto
    let _pA: [BigNumberish, BigNumberish] = [calldataRaycasting[0][0], calldataRaycasting[0][1]] as [BigNumberish, BigNumberish];
    let _pB: [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]] = [
        [calldataRaycasting[1][0][0], calldataRaycasting[1][0][1]],
        [calldataRaycasting[1][1][0], calldataRaycasting[1][1][1]]
    ] as [[BigNumberish, BigNumberish], [BigNumberish, BigNumberish]];
    let _pC: [BigNumberish, BigNumberish] = [calldataRaycasting[2][0], calldataRaycasting[2][1]] as [BigNumberish, BigNumberish];
    let _pubSignals: BigNumberish[] = calldataRaycasting[3] as BigNumberish[];

    // Llamar a verifyProof con los tipos correctos
    try {
        let result = await rayCastingVerifier.verifyProof(_pA, _pB, _pC, _pubSignals);
        console.log("Verificación completada:", result);
    } catch (error) {
        console.error("Error durante la verificación:", error);
    }
};

const runMain = async () => {
    try {
        await main();
        process.exit(0);
    } catch (error) {
        console.log(error);
        process.exit(1);
    }
};

runMain();
